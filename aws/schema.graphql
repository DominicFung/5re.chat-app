schema {
  query: Query
  mutation: Mutation
}

type Query {
  #5re.chat app
  getUser(masterSecret: String!, userId: ID!): _User!

  # 5re.chat
  getSessionToken(apiKey: String!): String!
  getConvo(sessionToken: String!, convoId: ID!): Convo!
}

type Mutation {
  # 5re.chat app
  createUser(masterSecret: String!, username: String!, avatarUrl: String!, githubId: String!): _User! @aws_iam
  updateUserDiscordGuild(masterSecret: String!, userId: ID!, discordGuildId: String!): _User!
  refreshUserApiKey(masterSecret: String!, userId: ID!): String!
  addOwnerMessage(masterSecret: String!, discordChannelId: String!, message: String!): String!

  # 5re.chat
  createConvo(sessionToken: String!): Convo!
  addMessage(sessionToken: String!, convoId: ID!, message: String!): String!
}

type Subscription {
  # 5re.chat app
  convoCount(sessionToken: String!): Int! @aws_subscribe(mutations: ["createConvo"])
  messageCount(sessionToken: String!): Int! @aws_subscribe(mutations: ["addMessage"])

  # 5re.chat
  onMessage(sessionToken: String!): Convo @aws_subscribe(mutations: ["addMessage"])
}

type User {
  username: String!
  avatarUrl: String!
  setupComplete: Boolean!
}

type _User @aws_iam {
  userId: ID!
  apiKey: String!

  githubId: String!
  username: String!
  avatarUrl: String!

  discordGuildId: String!
}

type Convo {
  convoId: ID!
  messages: [Message]
}

type _Convo {
  convoId: ID!
  apiKey: String!
  discordChannelId: String!
  messages: [Message]
}

enum UserType {
  OWNER
  CUSTOMER
}

type Message {
  userType: UserType
  message: String
}