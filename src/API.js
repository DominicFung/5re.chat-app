"use strict";
/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserType = void 0;
var UserType;
(function (UserType) {
    UserType["OWNER"] = "OWNER";
    UserType["CUSTOMER"] = "CUSTOMER";
})(UserType = exports.UserType || (exports.UserType = {}));
//# sourceMappingURL=data:application/json;base64,