"use strict";
/* tslint:disable */
/* eslint-disable */
//  This file was automatically generated and should not be edited.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserType = void 0;
var UserType;
(function (UserType) {
    UserType["OWNER"] = "OWNER";
    UserType["CUSTOMER"] = "CUSTOMER";
})(UserType = exports.UserType || (exports.UserType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQVBJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQVBJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG1FQUFtRTs7O0FBeURuRSxJQUFZLFFBR1g7QUFIRCxXQUFZLFFBQVE7SUFDbEIsMkJBQWUsQ0FBQTtJQUNmLGlDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFIVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQUduQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gIFRoaXMgZmlsZSB3YXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYW5kIHNob3VsZCBub3QgYmUgZWRpdGVkLlxuXG5leHBvcnQgdHlwZSBfVXNlciA9IHtcbiAgX190eXBlbmFtZTogXCJfVXNlclwiLFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZ2l0aHViSWQ6IHN0cmluZyxcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgYXZhdGFyVXJsOiBzdHJpbmcsXG4gIGFwcHM6ICBBcnJheTxfQXBwIHwgbnVsbCA+LFxufTtcblxuZXhwb3J0IHR5cGUgX0FwcCA9IHtcbiAgX190eXBlbmFtZTogXCJfQXBwXCIsXG4gIGFwcElkOiBzdHJpbmcsXG4gIHVzZXJJZDogc3RyaW5nLFxuICBhcHBOYW1lOiBzdHJpbmcsXG4gIGFwaUtleTogc3RyaW5nLFxuICB1bnNlYWw6IHN0cmluZyxcbiAgZGlzY29yZEd1aWxkSWQ6IHN0cmluZyxcbiAgc2Vzc2lvblRpbWVvdXQ6IG51bWJlcixcbiAgYWN0aXZlOiBib29sZWFuLFxufTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZSA9IHtcbiAgX190eXBlbmFtZTogXCJNZXNzYWdlXCIsXG4gIGhhc2g6IHN0cmluZyxcbiAgbWVzc2FnZTogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgQ29udm8gPSB7XG4gIF9fdHlwZW5hbWU6IFwiQ29udm9cIixcbiAgaGFzaDogc3RyaW5nLFxuICAvLyBmb3Igc3Vic2NyaXB0aW9uIHB1cnBvc2VzIC0gaGFzIG9mIHRoZSBDb252b0lkLlxuICBtZXNzYWdlVG9rZW46IHN0cmluZyxcbiAgLy8gdXNlIHRvIGVuY3J5cHQgLyBkZWNyeXB0IG1lc3NhZ2VzLlxuICBzZXNzaW9uVG9rZW46IHN0cmluZyxcbn07XG5cbmV4cG9ydCB0eXBlIF9Db252byA9IHtcbiAgX190eXBlbmFtZTogXCJfQ29udm9cIixcbiAgYXBwSWQ6IHN0cmluZyxcbiAgY29udm9JZDogc3RyaW5nLFxuICBhcGlLZXlVc2VkOiBzdHJpbmcsXG4gIGRpc2NvcmRHdWlsZElkOiBzdHJpbmcsXG4gIG1lc3NhZ2VUb2tlbjogc3RyaW5nLFxuICBzZXNzaW9uU3RhcnRUaW1lOiBzdHJpbmcsXG4gIGRpc2NvcmRDaGFubmVsSWQ6IHN0cmluZyxcbiAgbWVzc2FnZXM6ICBBcnJheTxfTWVzc2FnZSB8IG51bGwgPixcbn07XG5cbmV4cG9ydCB0eXBlIF9NZXNzYWdlID0ge1xuICBfX3R5cGVuYW1lOiBcIl9NZXNzYWdlXCIsXG4gIHNlbmREYXRlOiBzdHJpbmcsXG4gIHVzZXJUeXBlOiBVc2VyVHlwZSxcbiAgbWVzc2FnZTogc3RyaW5nLFxufTtcblxuZXhwb3J0IGVudW0gVXNlclR5cGUge1xuICBPV05FUiA9IFwiT1dORVJcIixcbiAgQ1VTVE9NRVIgPSBcIkNVU1RPTUVSXCIsXG59XG5cblxuZXhwb3J0IHR5cGUgQ3JlYXRlVXNlck11dGF0aW9uVmFyaWFibGVzID0ge1xuICBtYXN0ZXJTZWNyZXQ6IHN0cmluZyxcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgYXZhdGFyVXJsOiBzdHJpbmcsXG4gIGdpdGh1YklkOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBDcmVhdGVVc2VyTXV0YXRpb24gPSB7XG4gIC8vIDVyZS5jaGF0IGFwcFxuICBjcmVhdGVVc2VyOiAge1xuICAgIF9fdHlwZW5hbWU6IFwiX1VzZXJcIixcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBnaXRodWJJZDogc3RyaW5nLFxuICAgIHVzZXJuYW1lOiBzdHJpbmcsXG4gICAgYXZhdGFyVXJsOiBzdHJpbmcsXG4gICAgYXBwczogIEFycmF5PCB7XG4gICAgICBfX3R5cGVuYW1lOiBcIl9BcHBcIixcbiAgICAgIGFwcElkOiBzdHJpbmcsXG4gICAgICB1c2VySWQ6IHN0cmluZyxcbiAgICAgIGFwcE5hbWU6IHN0cmluZyxcbiAgICAgIGFwaUtleTogc3RyaW5nLFxuICAgICAgdW5zZWFsOiBzdHJpbmcsXG4gICAgICBkaXNjb3JkR3VpbGRJZDogc3RyaW5nLFxuICAgICAgc2Vzc2lvblRpbWVvdXQ6IG51bWJlcixcbiAgICAgIGFjdGl2ZTogYm9vbGVhbixcbiAgICB9IHwgbnVsbCA+LFxuICB9LFxufTtcblxuZXhwb3J0IHR5cGUgQWRkQXBwTXV0YXRpb25WYXJpYWJsZXMgPSB7XG4gIG1hc3RlclNlY3JldDogc3RyaW5nLFxuICB1c2VySWQ6IHN0cmluZyxcbiAgYXBwTmFtZT86IHN0cmluZyB8IG51bGwsXG59O1xuXG5leHBvcnQgdHlwZSBBZGRBcHBNdXRhdGlvbiA9IHtcbiAgYWRkQXBwOiAge1xuICAgIF9fdHlwZW5hbWU6IFwiX1VzZXJcIixcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBnaXRodWJJZDogc3RyaW5nLFxuICAgIHVzZXJuYW1lOiBzdHJpbmcsXG4gICAgYXZhdGFyVXJsOiBzdHJpbmcsXG4gICAgYXBwczogIEFycmF5PCB7XG4gICAgICBfX3R5cGVuYW1lOiBcIl9BcHBcIixcbiAgICAgIGFwcElkOiBzdHJpbmcsXG4gICAgICB1c2VySWQ6IHN0cmluZyxcbiAgICAgIGFwcE5hbWU6IHN0cmluZyxcbiAgICAgIGFwaUtleTogc3RyaW5nLFxuICAgICAgdW5zZWFsOiBzdHJpbmcsXG4gICAgICBkaXNjb3JkR3VpbGRJZDogc3RyaW5nLFxuICAgICAgc2Vzc2lvblRpbWVvdXQ6IG51bWJlcixcbiAgICAgIGFjdGl2ZTogYm9vbGVhbixcbiAgICB9IHwgbnVsbCA+LFxuICB9LFxufTtcblxuZXhwb3J0IHR5cGUgUmVtb3ZlQXBwTXV0YXRpb25WYXJpYWJsZXMgPSB7XG4gIG1hc3RlclNlY3JldDogc3RyaW5nLFxuICBhcHBJZDogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgUmVtb3ZlQXBwTXV0YXRpb24gPSB7XG4gIHJlbW92ZUFwcDogIHtcbiAgICBfX3R5cGVuYW1lOiBcIl9Vc2VyXCIsXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgZ2l0aHViSWQ6IHN0cmluZyxcbiAgICB1c2VybmFtZTogc3RyaW5nLFxuICAgIGF2YXRhclVybDogc3RyaW5nLFxuICAgIGFwcHM6ICBBcnJheTwge1xuICAgICAgX190eXBlbmFtZTogXCJfQXBwXCIsXG4gICAgICBhcHBJZDogc3RyaW5nLFxuICAgICAgdXNlcklkOiBzdHJpbmcsXG4gICAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgICBhcGlLZXk6IHN0cmluZyxcbiAgICAgIHVuc2VhbDogc3RyaW5nLFxuICAgICAgZGlzY29yZEd1aWxkSWQ6IHN0cmluZyxcbiAgICAgIHNlc3Npb25UaW1lb3V0OiBudW1iZXIsXG4gICAgICBhY3RpdmU6IGJvb2xlYW4sXG4gICAgfSB8IG51bGwgPixcbiAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIFVwZGF0ZUFwcE11dGF0aW9uVmFyaWFibGVzID0ge1xuICBtYXN0ZXJTZWNyZXQ6IHN0cmluZyxcbiAgYXBwSWQ6IHN0cmluZyxcbiAgZGlzY29yZEd1aWxkSWQ/OiBzdHJpbmcgfCBudWxsLFxuICBhcHBOYW1lPzogc3RyaW5nIHwgbnVsbCxcbiAgYWN0aXZlPzogYm9vbGVhbiB8IG51bGwsXG4gIHNlc3Npb25UaW1lb3V0PzogbnVtYmVyIHwgbnVsbCxcbn07XG5cbmV4cG9ydCB0eXBlIFVwZGF0ZUFwcE11dGF0aW9uID0ge1xuICB1cGRhdGVBcHA6ICB7XG4gICAgX190eXBlbmFtZTogXCJfQXBwXCIsXG4gICAgYXBwSWQ6IHN0cmluZyxcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgYXBpS2V5OiBzdHJpbmcsXG4gICAgdW5zZWFsOiBzdHJpbmcsXG4gICAgZGlzY29yZEd1aWxkSWQ6IHN0cmluZyxcbiAgICBzZXNzaW9uVGltZW91dDogbnVtYmVyLFxuICAgIGFjdGl2ZTogYm9vbGVhbixcbiAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIFJlZnJlc2hBcGlLZXlNdXRhdGlvblZhcmlhYmxlcyA9IHtcbiAgbWFzdGVyU2VjcmV0OiBzdHJpbmcsXG4gIGFwcElkOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBSZWZyZXNoQXBpS2V5TXV0YXRpb24gPSB7XG4gIHJlZnJlc2hBcGlLZXk6ICB7XG4gICAgX190eXBlbmFtZTogXCJfQXBwXCIsXG4gICAgYXBwSWQ6IHN0cmluZyxcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgYXBpS2V5OiBzdHJpbmcsXG4gICAgdW5zZWFsOiBzdHJpbmcsXG4gICAgZGlzY29yZEd1aWxkSWQ6IHN0cmluZyxcbiAgICBzZXNzaW9uVGltZW91dDogbnVtYmVyLFxuICAgIGFjdGl2ZTogYm9vbGVhbixcbiAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIEFkZE93bmVyTWVzc2FnZU11dGF0aW9uVmFyaWFibGVzID0ge1xuICBtYXN0ZXJTZWNyZXQ6IHN0cmluZyxcbiAgZGlzY29yZENoYW5uZWxJZDogc3RyaW5nLFxuICBtZXNzYWdlOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBBZGRPd25lck1lc3NhZ2VNdXRhdGlvbiA9IHtcbiAgYWRkT3duZXJNZXNzYWdlOiAge1xuICAgIF9fdHlwZW5hbWU6IFwiTWVzc2FnZVwiLFxuICAgIGhhc2g6IHN0cmluZyxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gIH0sXG59O1xuXG5leHBvcnQgdHlwZSBDcmVhdGVTZXNzaW9uTXV0YXRpb25WYXJpYWJsZXMgPSB7XG4gIGFwaUtleTogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgQ3JlYXRlU2Vzc2lvbk11dGF0aW9uID0ge1xuICAvLyA1cmUuY2hhdFxuICBjcmVhdGVTZXNzaW9uOiAge1xuICAgIF9fdHlwZW5hbWU6IFwiQ29udm9cIixcbiAgICBoYXNoOiBzdHJpbmcsXG4gICAgLy8gZm9yIHN1YnNjcmlwdGlvbiBwdXJwb3NlcyAtIGhhcyBvZiB0aGUgQ29udm9JZC5cbiAgICBtZXNzYWdlVG9rZW46IHN0cmluZyxcbiAgICAvLyB1c2UgdG8gZW5jcnlwdCAvIGRlY3J5cHQgbWVzc2FnZXMuXG4gICAgc2Vzc2lvblRva2VuOiBzdHJpbmcsXG4gIH0sXG59O1xuXG5leHBvcnQgdHlwZSBBZGRDdXN0b21lck1lc3NhZ2VNdXRhdGlvblZhcmlhYmxlcyA9IHtcbiAgc2Vzc2lvblRva2VuOiBzdHJpbmcsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbn07XG5cbmV4cG9ydCB0eXBlIEFkZEN1c3RvbWVyTWVzc2FnZU11dGF0aW9uID0ge1xuICBhZGRDdXN0b21lck1lc3NhZ2U6IHN0cmluZyxcbn07XG5cbmV4cG9ydCB0eXBlIEdldFVzZXJRdWVyeVZhcmlhYmxlcyA9IHtcbiAgbWFzdGVyU2VjcmV0OiBzdHJpbmcsXG4gIHVzZXJJZDogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgR2V0VXNlclF1ZXJ5ID0ge1xuICAvLyA1cmUuY2hhdCBhcHBcbiAgZ2V0VXNlcjogIHtcbiAgICBfX3R5cGVuYW1lOiBcIl9Vc2VyXCIsXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgZ2l0aHViSWQ6IHN0cmluZyxcbiAgICB1c2VybmFtZTogc3RyaW5nLFxuICAgIGF2YXRhclVybDogc3RyaW5nLFxuICAgIGFwcHM6ICBBcnJheTwge1xuICAgICAgX190eXBlbmFtZTogXCJfQXBwXCIsXG4gICAgICBhcHBJZDogc3RyaW5nLFxuICAgICAgdXNlcklkOiBzdHJpbmcsXG4gICAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgICBhcGlLZXk6IHN0cmluZyxcbiAgICAgIHVuc2VhbDogc3RyaW5nLFxuICAgICAgZGlzY29yZEd1aWxkSWQ6IHN0cmluZyxcbiAgICAgIHNlc3Npb25UaW1lb3V0OiBudW1iZXIsXG4gICAgICBhY3RpdmU6IGJvb2xlYW4sXG4gICAgfSB8IG51bGwgPixcbiAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIFZpZXdDb252b1F1ZXJ5VmFyaWFibGVzID0ge1xuICBtYXN0ZXJTZWNyZXQ6IHN0cmluZyxcbiAgY29udm9JZDogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgVmlld0NvbnZvUXVlcnkgPSB7XG4gIHZpZXdDb252bzogIHtcbiAgICBfX3R5cGVuYW1lOiBcIl9Db252b1wiLFxuICAgIGFwcElkOiBzdHJpbmcsXG4gICAgY29udm9JZDogc3RyaW5nLFxuICAgIGFwaUtleVVzZWQ6IHN0cmluZyxcbiAgICBkaXNjb3JkR3VpbGRJZDogc3RyaW5nLFxuICAgIG1lc3NhZ2VUb2tlbjogc3RyaW5nLFxuICAgIHNlc3Npb25TdGFydFRpbWU6IHN0cmluZyxcbiAgICBkaXNjb3JkQ2hhbm5lbElkOiBzdHJpbmcsXG4gICAgbWVzc2FnZXM6ICBBcnJheTwge1xuICAgICAgX190eXBlbmFtZTogXCJfTWVzc2FnZVwiLFxuICAgICAgc2VuZERhdGU6IHN0cmluZyxcbiAgICAgIHVzZXJUeXBlOiBVc2VyVHlwZSxcbiAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICB9IHwgbnVsbCA+LFxuICB9LFxufTtcblxuZXhwb3J0IHR5cGUgVmlld01lc3NhZ2VzUXVlcnlWYXJpYWJsZXMgPSB7XG4gIG1hc3RlclNlY3JldDogc3RyaW5nLFxuICBjb252b0lkOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBWaWV3TWVzc2FnZXNRdWVyeSA9IHtcbiAgdmlld01lc3NhZ2VzOiAgQXJyYXk8IHtcbiAgICBfX3R5cGVuYW1lOiBcIl9NZXNzYWdlXCIsXG4gICAgc2VuZERhdGU6IHN0cmluZyxcbiAgICB1c2VyVHlwZTogVXNlclR5cGUsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICB9IHwgbnVsbCA+LFxufTtcblxuZXhwb3J0IHR5cGUgR2V0TWVzc2FnZXNRdWVyeVZhcmlhYmxlcyA9IHtcbiAgc2Vzc2lvblRva2VuOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBHZXRNZXNzYWdlc1F1ZXJ5ID0ge1xuICAvLyA1cmUuY2hhdFxuICAvLyAtIHNlc3Npb25Ub2tlbiB3aWxsIGhhdmUgc2VhbGVkIHRoZSBjb252b0lkXG4gIGdldE1lc3NhZ2VzOiAgQXJyYXk8IHtcbiAgICBfX3R5cGVuYW1lOiBcIk1lc3NhZ2VcIixcbiAgICBoYXNoOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICB9IHwgbnVsbCA+LFxufTtcblxuZXhwb3J0IHR5cGUgT25NZXNzYWdlU3Vic2NyaXB0aW9uVmFyaWFibGVzID0ge1xuICBoYXNoOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBPbk1lc3NhZ2VTdWJzY3JpcHRpb24gPSB7XG4gIC8vIDVyZS5jaGF0XG4gIG9uTWVzc2FnZT86ICB7XG4gICAgX190eXBlbmFtZTogXCJNZXNzYWdlXCIsXG4gICAgaGFzaDogc3RyaW5nLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgfSB8IG51bGwsXG59O1xuIl19